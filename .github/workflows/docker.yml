name: Update Docker Image

on:
  schedule:
    - cron: '0 6 * * *'
  push:
    branches:
      - main
  workflow_call:
    secrets:
      DOCKER_TOKEN:
        required: true
      DOCKER_USERNAME:
        required: true

jobs:
  versions:
    name: Check Versions
    runs-on: ubuntu-latest
    outputs:
      new_tag: ${{ steps.variables.outputs.new_tag }}
      tf_version: ${{ steps.variables.outputs.tf_version }}
      tg_version: ${{ steps.variables.outputs.tg_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Check for Terraform updates
        id: tf_version
        run: |
          CURRENT_VERSION=$(grep -oP '(?<=TERRAFORM_VERSION=).*' Dockerfile)
          LATEST_VERSION=$(curl --silent "https://checkpoint-api.hashicorp.com/v1/check/terraform?current_version=0.0.0" | grep -Po '(?<=current_version":")[^"]*')
          if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
            echo "NEW_TF_VERSION=$LATEST_VERSION" >> $GITHUB_ENV
            echo >&2 "New Terraform version found: $LATEST_VERSION"
          fi
          echo "TF_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

      - name: Check for Terragrunt updates
        id: tg_version
        run: |
          CURRENT_VERSION=$(grep -oP '(?<=TERRAGRUNT_VERSION=).*' Dockerfile)
          LATEST_VERSION=$(curl --silent "https://api.github.com/repos/gruntwork-io/terragrunt/releases/latest" | jq -r ".tag_name" | cut -c 2-)
          if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
            echo "NEW_TG_VERSION=$LATEST_VERSION" >> $GITHUB_ENV
            echo >&2 "New Terragrunt version found: $LATEST_VERSION"
          fi
          echo "TG_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

      - name: Setting the NEW_TAG variable
        id: new_tag
        if: env.NEW_TF_VERSION || env.NEW_TG_VERSION
        run: |
          echo "NEW_TAG=${{ env.NEW_TG_VERSION || env.TG_VERSION }}-terraform-${{ env.NEW_TF_VERSION || env.TF_VERSION }}" >> $GITHUB_ENV

      - name: Export outputs
        id: variables
        run: |
          echo "tg_version=${{ env.NEW_TG_VERSION || env.TG_VERSION }}" >> $GITHUB_OUTPUT
          echo "tf_version=${{ env.NEW_TF_VERSION || env.TF_VERSION }}" >> $GITHUB_OUTPUT
          echo "new_tag=${{ env.NEW_TAG }}" >> $GITHUB_OUTPUT

      - name: Publish Summary
        run: |
          echo "## Version summary" >> $GITHUB_STEP_SUMMARY
          echo "| | Old | New |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | :-: | :-: |" >> $GITHUB_STEP_SUMMARY
          echo "| Terraform | ${{ env.TF_VERSION }} | ${{ env.NEW_TF_VERSION }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Terragrunt | ${{ env.TG_VERSION }} | ${{ env.NEW_TG_VERSION }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Tag | ${{ env.TG_VERSION }}-terraform-${{ env.TF_VERSION }} | ${{ env.NEW_TAG }} |" >> $GITHUB_STEP_SUMMARY

  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: versions
    if: needs.versions.outputs.new_tag && needs.versions.outputs.tf_version && needs.versions.outputs.tg_version
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ vars.DOCKER_REPOSITORY_NAME }}:${{ needs.versions.outputs.new_tag }}-ubuntu-jammy-build-${{ github.run_id }}.${{ github.run_number }}
            ${{ vars.DOCKER_REPOSITORY_NAME }}:latest
          build-args: |
            TERRAFORM_VERSION=${{ needs.versions.outputs.tf_version }}
            TERRAGRUNT_VERSION=${{ needs.versions.outputs.tg_version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  git:
    name: Update Git
    runs-on: ubuntu-latest
    needs: [ versions, build ]
    if: needs.versions.outputs.new_tag && needs.versions.outputs.tf_version && needs.versions.outputs.tg_version
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Update Dockerfile with new versions
        run: |
          sed -i "s/^ARG TERRAFORM_VERSION=.*/ARG TERRAFORM_VERSION=${{ needs.versions.outputs.tf_version }}/" Dockerfile
          sed -i "s/^ARG TERRAGRUNT_VERSION=.*/ARG TERRAGRUNT_VERSION=${{ needs.versions.outputs.tg_version }}/" Dockerfile

      - name: Commit updated Dockerfile
        run: |
          git checkout main
          git add Dockerfile
          git commit -m "chore: Update Dockerfile with new Terraform and Terragrunt versions"
          git push origin main

      - name: Create new tag
        id: tag_version
        run: |
          git tag ${{ needs.versions.outputs.new_tag }}
          git push origin ${{ needs.versions.outputs.new_tag }}

      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.versions.outputs.new_tag }}
          release_name: "${{ needs.versions.outputs.new_tag }}"
          body: |
            Automated Release with new package versions.
            New versions:
            - Terraform: ${{ needs.versions.outputs.tf_version }}
            - Terragrunt: ${{ needs.versions.outputs.tg_version }}
          draft: false
          prerelease: false
