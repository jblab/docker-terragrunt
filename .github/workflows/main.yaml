name: CI/CD Workflow

on:
  schedule:
    - cron: '0 6 * * *'
  push:
    branches:
      - main

jobs:
  versions:
    name: Check Versions
    runs-on: ubuntu-latest
    outputs:
      new-tag: ${{ steps.variables.outputs.new-tag }}
      tf-version: ${{ steps.variables.outputs.tf-version }}
      tg-version: ${{ steps.variables.outputs.tg-version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Check for Terraform updates
        id: tf-version
        run: |
          CURRENT_VERSION=$(grep -oP '(?<=TERRAFORM_VERSION=).*' Dockerfile)
          LATEST_VERSION=$(curl --silent "https://checkpoint-api.hashicorp.com/v1/check/terraform?current_version=0.0.0" | grep -Po '(?<=current_version":")[^"]*')
          if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
            echo "NEW_TF_VERSION=$LATEST_VERSION" >> $GITHUB_ENV
            echo >&2 "New Terraform version found: $LATEST_VERSION"
          fi
          echo "TF_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

      - name: Check for Terragrunt updates
        id: tg-version
        run: |
          CURRENT_VERSION=$(grep -oP '(?<=TERRAGRUNT_VERSION=).*' Dockerfile)
          LATEST_VERSION=$(curl --silent "https://api.github.com/repos/gruntwork-io/terragrunt/releases/latest" | jq -r ".tag_name" | cut -c 2-)
          if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
            echo "NEW_TG_VERSION=$LATEST_VERSION" >> $GITHUB_ENV
            echo >&2 "New Terragrunt version found: $LATEST_VERSION"
          fi
          echo "TG_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV

      - name: Setting the NEW_TAG variable
        id: new-tag
        run: |
          echo "NEW_TAG=tg-${{ env.NEW_TG_VERSION || env.TG_VERSION }}-tf-${{ env.NEW_TF_VERSION || env.TF_VERSION }}" >> $GITHUB_ENV

      - name: Export outputs
        id: variables
        run: |
          echo "tg-version=${{ env.NEW_TG_VERSION || env.TG_VERSION }}" >> $GITHUB_OUTPUT
          echo "tf-version=${{ env.NEW_TF_VERSION || env.TF_VERSION }}" >> $GITHUB_OUTPUT
          echo "new-tag=${{ env.NEW_TAG }}" >> $GITHUB_OUTPUT

      - name: Publish Summary
        run: |
          echo "## Version summary" >> $GITHUB_STEP_SUMMARY
          echo "| | Old | New |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | :-: | :-: |" >> $GITHUB_STEP_SUMMARY
          echo "| Terraform | ${{ env.TF_VERSION }} | ${{ env.NEW_TF_VERSION }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Terragrunt | ${{ env.TG_VERSION }} | ${{ env.NEW_TG_VERSION }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Tag | tg-${{ env.TG_VERSION }}-tf-${{ env.TF_VERSION }} | ${{ env.NEW_TAG }} |" >> $GITHUB_STEP_SUMMARY

  ci:
    name: Build Docker Image for CI
    needs: versions
    if: needs.versions.outputs.new-tag && needs.versions.outputs.tf-version && needs.versions.outputs.tg-version
    uses: ./.github/workflows/docker-build.yaml
    with:
      push_image: false
      git_tag: 0.0.0
      tf_version: ${{ needs.versions.outputs.tf-version }}
      tg_version: ${{ needs.versions.outputs.tg-version }}
      version_tag: ${{ needs.versions.outputs.new-tag }}
    secrets:
      DOCKER_USERNAME: ''
      DOCKER_TOKEN: ''

  git:
    name: Update Git
    runs-on: ubuntu-latest
    needs: [ versions, ci ]
    if: needs.versions.outputs.new-tag && needs.versions.outputs.tf-version && needs.versions.outputs.tg-version
    environment: main
    outputs:
      new-tag: ${{ steps.variables.outputs.new-tag }}
    steps:
      - uses: actions/create-github-app-token@v1.11.0
        id: app-token
        with:
          app-id: ${{ vars.GHA_BOT_APP_ID }}
          private-key: ${{ secrets.GHA_BOT_PRIVATE_KEY }}
          repositories: |
            docker-terragrunt

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          token: ${{ steps.app-token.outputs.token }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'

      - name: Install dependencies
        run: npm install

      - name: Set up Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Update Dockerfile with new versions
        run: |
          sed -i "s/^ARG TERRAFORM_VERSION=.*/ARG TERRAFORM_VERSION=${{ needs.versions.outputs.tf-version }}/" Dockerfile
          sed -i "s/^ARG TERRAGRUNT_VERSION=.*/ARG TERRAGRUNT_VERSION=${{ needs.versions.outputs.tg-version }}/" Dockerfile

      - name: Get Latest Tag and Release
        run: |
          LATEST_RELEASE=$(gh release list --repo jblab/docker-terragrunt --limit 1 --exclude-drafts --json name -q .[0].name || echo 'N/A')
          LATEST_TAG=$(gh api -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" /repos/${{ github.repository }}/tags -q .[0].name || echo 'N/A')
          echo "LATEST_RELEASE=$LATEST_RELEASE" >> $GITHUB_ENV
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Commit updated Dockerfile
        run: |
          git checkout main
          git add Dockerfile
          if ! git diff-index --quiet HEAD -- Dockerfile; then
            git commit -m "chore(tool-versions): Update Dockerfile with new Terraform and Terragrunt versions [skip ci]"
            git push origin main
          fi

      - name: Run semantic-release
        id: semantic
        run: |
          npx semantic-release 2>&1 | tee release_output.txt
          TAG=$(tail -1 release_output.txt | grep -oP "\d+\.\d+\.\d+" || true)
          if [[ -n "$TAG" ]]; then
            echo "NEW_TAG=$TAG" >> $GITHUB_ENV
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Export outputs
        id: variables
        run: |
          echo "new-tag=${{ env.NEW_TAG }}" >> $GITHUB_OUTPUT

      - name: Publish Summary
        run: |
          echo "## New Tag summary" >> $GITHUB_STEP_SUMMARY
          echo "A new Release and Tag has been created."
          echo "| | Prvious | New |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | :-: | :-: |" >> $GITHUB_STEP_SUMMARY
          echo "| Tag | ${{ env.LATEST_TAG }} | ${{ env.NEW_TAG }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Release | ${{ env.LATEST_RELEASE }} | ${{ env.NEW_TAG }} |" >> $GITHUB_STEP_SUMMARY

  build:
    name: Build and Push Docker Image
    needs: [ versions, ci, git ]
    if: needs.versions.outputs.new-tag && needs.versions.outputs.tf-version && needs.versions.outputs.tg-version && needs.git.outputs.new-tag
    uses: ./.github/workflows/docker-build.yaml
    with:
      push_image: true
      environment: main
      version_tag: ${{ needs.versions.outputs.new-tag }}
      git_tag: ${{ needs.git.outputs.new-tag }}
      tf_version: ${{ needs.versions.outputs.tf-version }}
      tg_version: ${{ needs.versions.outputs.tg-version }}
      target: 'base'
    secrets: inherit

  build_dev:
    name: Build and Push Docker Image for Azure DevOps
    needs: [ versions, ci, git ]
    if: needs.versions.outputs.new-tag && needs.versions.outputs.tf-version && needs.versions.outputs.tg-version && needs.git.outputs.new-tag
    uses: ./.github/workflows/docker-build.yaml
    with:
      push_image: true
      environment: main
      version_tag: ${{ needs.versions.outputs.new-tag }}-dev-tools
      git_tag: ${{ needs.git.outputs.new-tag }}
      tf_version: ${{ needs.versions.outputs.tf-version }}
      tg_version: ${{ needs.versions.outputs.tg-version }}
      target: 'dev'
    secrets: inherit

  build_ado:
    name: Build and Push Docker Image for Azure DevOps
    needs: [ versions, ci, git ]
    if: needs.versions.outputs.new-tag && needs.versions.outputs.tf-version && needs.versions.outputs.tg-version && needs.git.outputs.new-tag
    uses: ./.github/workflows/docker-build.yaml
    with:
      push_image: true
      environment: main
      version_tag: ${{ needs.versions.outputs.new-tag }}-azdo
      git_tag: ${{ needs.git.outputs.new-tag }}
      tf_version: ${{ needs.versions.outputs.tf-version }}
      tg_version: ${{ needs.versions.outputs.tg-version }}
      target: 'ado_builder'
    secrets: inherit
